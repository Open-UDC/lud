#!/bin/bash

function i { return ; } # Just because "<<" mess with syntax coloration ...

function udc_freadbalance {
# (fast) Print sum (value) of grains usable in all given accounts according to local files
# Arguments 1... (Optionnal) : fingerprint of keys/accounts to read balance. By default : use keys in $myaccounts.
# Output the total amount of grains available in all given accounts/key
# Return true if all OK. 1 if a given key in the (global variable) $Currency is not found locally.
local keys file vamount=0 ret=0

    for keys in ${@:-${myaccounts[@]}} ; do
        if ! [[ -d "$udcHOME/$Currency/k/${keys: -16}" ]] ; then 
            ret=1
            continue
        fi
        while read file ; do 
	    ((vamount+=${file##*/}*$(gawk 'END { print NR }' $file) ))
    	done < <(ls "$udcHOME/$Currency/k/${keys: -16}/g/"[1-9]*)
    done
    #echo -e "$vamount\n$wamount\n$((wamount+vamount))"
    echo "$((vamount))"

    return $ret
}

function udc_preparetransaction {
# Prepare grains for a transaction
# Argument 1 : amount
# Arguments 2 (Optionnal) : fingerprint of the key/account to use. By default : use 1st key in $myaccounts.
# StdOut: the content of an array to tell how many grains to take from each value
## Return the sum of the best grains selection : it can be greater than the amount asked, if we miss smallest grains. Or lesser if the amount asked is greater than the balance.
# Return 0 if prepared grains match asked amount. 254 if the amount asked is greater than the balance. Max(253,sum-asked) if we miss smallest grains. 255 if an other error occurs.

    local amount=$(($1)) key="${2:-${myaccounts[0]}}" i=0 j=0 total=0 sum=0 miss out=()

    ((amount>0)) || return 0 # if amount<=0 , nothing to do ...

    local wallet=($(udc_freadgrains $key))
    for ((i=0;i<${#wallet[@]};i++)) ; do 
        ((total+=wallet[i]*(1<<i)))
        ((out[i]=0))
        if (( (1<<i)<=amount )) ; then
            ((j=i+1))
        fi
    done
    #echo "total=$total"

    ((total<amount)) && return 254 # We don't have enough grains !!

    #mkdir -p "$TmpDir/$key/g"

    while ((sum!=amount && j>=0)) ; do
        if ((wallet[j] && sum+(1<<j)<=amount)); then
            ((wallet[j]--))
            ((out[j]++))
            ((sum+=1<<j))
        else
            ((j--))
        fi
    done
#    echo $sum

    if ((sum<amount)) ; then # we can't make the exact amount
        ((miss=amount-sum)) ; j=0
        while ((miss>>j)) ; do ((j++)) ; done
#        echo "$miss $j"
        for ((i=j;i<${#wallet[@]};i++)) ; do 
            if ((wallet[i])) ; then
                if (((1<<i)>amount)) ; then 
                    for j in ${!out[@]} ; do
                        ((out[j]=0))
                    done
                    ((out[i]=1))
                    ((sum=1<<i))
                else
                    # Note: It may be optimized, to remove smallest grains.
                    ((out[i]++))
                    ((sum+=1<<i))
                fi
                echo "${out[@]}"
                return $((sum-amount>253?253:sum-amount))
            fi
        done
        return 255
    elif ((sum>amount)) ; then
        return 255
    else
        echo "${out[@]}"
        return
    fi

    return 255

    #for i in ${!out[@]} ; do 
        #cp "$udcHOME/$Currency/k/$key/g/$ref" "$TmpDir/$key/g/" || return 255
        #g+=($(sed -n 1,$((1<<j))p "$TmpDir/$key/g/$ref" )) || return 255
        #sed -i 1,$((1<<j))d "$TmpDir/$key/g/$ref" || return 255
}

function udc_maketransaction {
# Create the OpenPGP signed message of a transaction, in the waiting directory
# Argument 1: the fingerprint of key/account which make the transaction
# Argument 2: the fingerprint of destination key/account of the transaction
# Argument 3... : the grains to send for each value, as given by udc_preparetransaction account.
# StdOut: the transaction filename if OK.
# Return true if OK, 1 if an error in input parameter, 2 if a biggest error with local files (corrupted).

    local srck="$1" destk="$2" g i=0 ok=0 grains="" srcn grain neg myKeyID nprev KeyIDprev etc

    [[ "$srck" =~ ^[0-9A-F]{40}$ ]] && [[ "$destk" =~ ^[0-9A-F]{40}$ ]] || return 1
    [[ "$srck" != $destk ]] || return 1
    udc_isaccount "$destk" || return 1

    shift 2
    
    rm -rf "$TmpDir/patchg"
    mkdir -p "$TmpDir/patchg"
        
    for g in "$@" ; do
        if ((g>0)) ; then
            ok=1
            grains+="$(sed -n "1,${g}p" "$udcHOME/$Currency/k/${srck: -16}/g/"$((1<<i)) ) "
            echo -e "1,${g}d" >> "$TmpDir/patchg/"$((1<<i))
        fi
        ((i++))
    done
    ((ok)) || return 1

    srcn="$(ls -vr "$udcHOME/$Currency/k/${srck: -16}/w/" | sed -n '1p' )"
    [[ "$srcn" ]] || srcn="$(ls -vr "$udcHOME/$Currency/k/${srck: -16}/v/" | sed -n '1p' )"
    [[ "$srcn" =~ ^[0-9]*$ ]] && ((++srcn)) || return 2

    (echo -e "d=t2\n$Currency\n$srck\n$srcn\n$destk" ;
    while read grain neg myKeyID nprev KeyIDprev etc ; do
        ((neg>=0)) || return 2
        [[ "$myKeyID" == ${srck: -16} ]] || return 2
        echo "$grain $((neg+1)) $nprev $KeyIDprev"
    done < <(udc_db_getstatus $grains )
    ) | $udc_gpg --sign -u "$srck!" > "$udcHOME/$Currency/k/${srck: -16}/w/$srcn" || return 1

    echo "$udcHOME/$Currency/k/${srck: -16}/w/$srcn"

    for file in "$TmpDir/patchg/"* ; do
        patch "$udcHOME/$Currency/k/${srck: -16}/g/${file##*/}" "$file" || return 2
    done
    rm -rf "$TmpDir/patchg"

    #publish the transaction
    #udc_POST ...

    #for g in ${grains[@]} ; do
    #    grep "${g%%\.*}" "$udcHOME/$Currency/k/$1/g/${g%%-*}" > /dev/null 2>&1 \
    #    || echo "$g" >> "$udcHOME/$Currency/k/$1/g/${g%%-*}"
    #done
}

function udc_validatetransaction {
# Validate a transaction file. 
# Argument 1: the transaction file to validate
# StdOut:
# * if this is a new and valid transaction:
#       "NewOwnerKeyID TransactionIndexOfPreviousOwner PreviousOwnerKeyID"
#       "grain" for each grain to update.
#       "..."
# Return:
#   * true if OK. In this case also copy the file into "$udcHOME/$Currency/k/$srcKey/v/$SrcN".
#   * 1 if OK but already validated
#   * 2 if OK but we fail copying the file into "$udcHOME/$Currency/k/$srcKey/v/$SrcN".
#   * 4 if we miss some previous validation(s) in our status database. 
#   * 5 if the counter of a grain is too old 
#   * 6 if double spending detected !
#   * 7 if an error in input parameter
#   * 8 if the file is an Invalid PGP Message
#   * 9 if the signing key/account is not recognized
#   * 10 if the used format is unknow
#   * 11 if the currency is unrecognized
#   * 12 if the destination key/account is the signing key/account (transaction to itself)
#   * 13 if the from key/account is not the signing key/account
#   * 14 if the destination key/account is not recognized
#   * 15 if the transaction is invalid because SrcKey already did an other transaction with SrcN index.
#   * 16 if the transaction is invalid because a given grain don't even exist.
#   * 17 if the transaction is invalid because there is at least a grain that SrcKey does not own.
#   * 18 if the transaction is invalid because the pointer on previous transaction is false
# Note : Today date inside PGP MESSAGE are not check.

    [[ -f "$1" ]] || return 7

    local SrcFprint="$(LANGUAGE=en $udc_gpg --verify --batch --no-verbose --with-fingerprint "$1" 2>&1 )" \
    && SrcFprint="$(echo "$SrcFprint" | sed -n ' $s, ,,g ; $s,.*:\([0-9A-F]\{40\}\),\1,p ')" \
    && [[ "$SrcFprint" ]] || return 8

    udc_isaccount "$SrcFprint" || return 9

    local SrcMessage tgrain tnegrain tnprev tKeyIDprev bgrain bnegrain OwnerKeyID bnprev bKeyIDprev etc i

    mapfile -t SrcMessage < <($udc_gpg --decrypt --batch --no-verbose "$1" )
    local srcKey=${SrcMessage[2]} 
    local SrcN=${SrcMessage[3]} 
    local destKey=${SrcMessage[4]}

    #for i in ${!SrcMessage[@]} ; do echo "PRIVMSG $SrcNick :${SrcMessage[$i]}" ; done | $IrcLogpipe >> "$Ircfifo"
    [[ "${SrcMessage[0]}" == "d=t2" ]] || return 10
    [[ "${SrcMessage[1]}" == "$Currency" ]] || return 11
    [[ "$destKey" != $SrcFprint ]] || return 12
    [[ "$srcKey" == $SrcFprint ]] && ((SrcN>0)) || return 13
    udc_isaccount "$destKey" || return 14

    #First check if this transaction is not already validated...
    if [[ -f "$udcHOME/$Currency/k/${srcKey: -16}/v/$SrcN" ]] ; then
        if diff <($udc_gpg --decrypt "$1" 2> /dev/null ) <($udc_gpg --decrypt "$udcHOME/$Currency/k/${srcKey: -16}/v/$SrcN" 2> /dev/null ) >&2 ; then
            return 1
        else
            #echo ":The transaction $SrcN of $srcKey already exist and differs !" >&2
            return 15
        fi
    fi

    unset SrcMessage[0] SrcMessage[1] SrcMessage[2] SrcMessage[3] SrcMessage[4]
    for i in "${!SrcMessage[@]}" ; do 
        read tgrain tnegrain tnprev tKeyIDprev < <(echo "${SrcMessage[$i]}")
        read bgrain bnegrain OwnerKeyID bnprev bKeyIDprev etc < <(udc_db_getstatus $tgrain)
        ((bnegrain>=0)) || return 16
        if ((tnegrain==bnegrain)) ; then # we already did validate a transaction for this grain => double spending !
            #echo -e ":Double Spending detected : $srcKey already give $bgrain $bnegrain"\
            #        "\n   to $OwnerKeyID - cf. transaction $bnprev $bKeyIDprev -" >&2
            return 6
        fi

        ((tnegrain>bnegrain+1)) && return 4
        ((tnegrain<bnegrain)) && return 5 # should not occurs since "$udcHOME/$Currency/k/$srcKey/v/$SrcN" should exist
        #((tnegrain==bnegrain+1)) # only this case remain
        [[ "$OwnerKeyID" == ${SrcFprint: -16} ]] || return 17  # The srcKey is not the owner !
        if ((bnegrain>0)) ; then
            ((bnprev==tnprev)) && [[ "$bKeyIDprev" == $tKeyIDprev ]] || return 18 # previous pointer don't match.
        fi
    done

    for i in "${!SrcMessage[@]}" ; do 
        read tgrain tnegrain tnprev tKeyIDprev < <(echo "${SrcMessage[$i]}")
        echo "$tgrain ${destKey: -16} $SrcN"
    done
    mkdir -p "$udcHOME/$Currency/k/${SrcFprint: -16}/v" \
    && cp "$1" "$udcHOME/$Currency/k/${SrcFprint: -16}/v/$SrcN" || return 2
    mkdir -p "$udcHOME/$Currency/k/${destKey: -16}/u" \
    && echo "$SrcN" >> "$udcHOME/$Currency/k/${destKey: -16}/u/${SrcFprint: -16}" || return 2

    [[ "${myaccounts[*]}" =~ $destKey ]] || return 1

}

function UDvalidate {
# Validate a transaction, and update local db.
# Argument 1: the transaction file to validate
# Argument 2 (optionnal): the key to sign and so to validate transaction.
# StdOut: the OpenPGP detached signature if Argument 2 is present an signing is OK.
# Return true if all OK. 253-254 if update local database fail (corrupted !), error_code of udc_validatetransaction in other case.

    local update ret grain key etc account

    update="$(udc_validatetransaction "$1")"
    ret="$?"
    case "$ret" in
        1) echo "OpenUDC 1 Warning : transaction was already validated." ;;
        2) echo "OpenUDC 2 Warning : transaction OK, but storing it fail." ;;
        4) echo "OpenUDC 4 Warning : we miss previous validation(s) in our database." ;;
        5) echo "OpenUDC 5 Error : incorrect grain counter." ;;
        6) echo "OpenUDC 6 Error : double spending detected !" ;;
        7) echo "OpenUDC 7 Error : no input found." ;;
        8) echo "OpenUDC 8 Error : input is not a valid PGP Message." ;;
        9) echo "OpenUDC 9 Error : unrecognized signing key/account." ;;
        10) echo "OpenUDC 10 Error : unknow format." ;;
        11) echo "OpenUDC 11 Error : unrecognized currency." ;;
        12) echo "OpenUDC 12 Error : destination key/account is the signing key/account." ;;
        13) echo "OpenUDC 13 Error : source key/account is not the signing key/account." ;;
        14) echo "OpenUDC 14 Error : unrecognized destination key/account." ;;
        15) echo "OpenUDC 15 Error : source key already did an other transaction with SrcN index." ;;
        16) echo "OpenUDC 16 Error : a given grain don't even exist." ;;
        17) echo "OpenUDC 17 Error : there is at least a grain that SrcKey does not own." ;;
        18) echo "OpenUDC 18 Error : a pointer on previous transaction is false." ;;
    esac

    ((ret)) || return "$ret"

    if ! echo "$update" | udc_db_updatestatus ; then 
        echo "OpenUDC 3 Warning : transaction OK, but updating our status database fail."
        return 3
    fi

    [[ "$2" ]] && $udc_gpg --decrypt "$1" 2>/dev/null | $udc_gpg --detach-sign -o - --armor -u "$2"\!

     # Check if the destination is one of our account (and update our available grains if so)
    ((ret==0)) && while read grain key etc ; do
        [[ "$account" ]] || for account in "${myaccounts[@]}" "" ; do
            [[ "${account: -16}" == $key ]] && break ;
        done
        [[ "$account" ]] && echo "$grain" >> "$udcHOME/$Currency/k/${account: -16}/g/${grain%%-*}"  || return 253
    done < <(echo "$update" )

    return $ret
}

function udc_freadgrains {
# (fast) Print an array to tell how many grains are available for each value.
# Arguments 1 (Optionnal) : fingerprint of the key/account to read grains. By default : use 1st key in $myaccounts.
# StdOut: up to 64 numbers corresponding to the grains of value 1 2 4 8 16 ... 922337203685477580
# Return true if all OK. 1 if the given key (in the global $Currency) is not found locally.
    local key=${1:-${myaccounts[0]}} i=63 j

    key="${key: -16}"
    [[ -d "$udcHOME/$Currency/k/$key" ]] || return 1
    while ! [[ -f "$udcHOME/$Currency/k/$key/g/"$((1<<i )) ]] ; do # Note "<<" mess with syntax coloration ...
i 
        ((i--))
    done
    for ((j=0;j<=i;j++)) ; do
        echo -n "$(($(gawk 'END { print NR }' "$udcHOME/$Currency/k/$key/g/"$((1<<j)) 2> /dev/null) )) "
    done
}

