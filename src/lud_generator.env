#!/bin/bash
# -*- vim mode: sh; tabstop: 4; shiftwidth: 4; softtabstop: 4; -*-

type lud_utils_chooseinlist > /dev/null 2>&1 || . lud_utils.env

function lud_generator_pgpuid {
# Return 0 (true) if user want to hide its clean udid2, 1 if not.
local lud_udid2c=0 answer mname email mudid2 reph
	#while true ; do # hashed udid2 are no more valid to register our first currency.
	while false ; do
		read -p " Do you prefer to hide or show your birthname, birthdate and birthplace (h/s) ? " reph
		case "$reph" in
		  [hH]*)
			echo -e "Okay. We and all signatories will ask you them altough, to calculate the hash of your identity." >&2
			break ;;
		  [sS]*)
			lud_udid2c=1
			break ;;
		  *) echo "  please answer \"hide\" or \"show\"" >&2 ;;
		esac
	done
	mudid2="$(lud_generator_udid)" || $lud_exit 42
	echo -e "$mudid2\n" >&2

	for ((;;)) ; do
		for ((;;)) ; do
			read -p "Please enter your most used email adress ? " email
			grep "^[^@[:space:]]\+@[^.[:space:]]\+\.[^[:space:]]\+$" <(echo $email) > /dev/null && break
		done

		read -p "Please enter your most used name(s) (or surname, acronym, pseudonym...) ? " mname
		echo -e "\nSummary:\n"\
				"Used Name: $mname\n"\
				"email: $email\n" >&2
		read -p "Is that correct ? (y/n) " answer
		case "$answer" in
			Y* | y* | O* | o* )
				break ;;
		esac
	done
	cat << EOF
$mname
$email
$(grep "^udid2;h;" <(echo "$mudid2"))

$mname
$email
$(grep "^udid2;c;" <(echo "$mudid2"))
EOF
return
}

function lud_generator_udid {

	local CFiles Country cCFiles cCountries answer
	local helpmsg='
Usage: '"${lud_call:-UDgenudid}"' [options]

Options:
 -f, --file FILE	 geolist file to use
'
	local udcGEOLISTFPR=("0F16B563D2768EA62B36A13C442C7E45EEF5EAE6")
	local udcGEOLISTUDID=("udid2;h;4c5441eb5fbe391b27f6baaa1e8203d1990d98b5;0")
	local udcCountries=("FRA" "ITA")

	for i in ${!udcCountries[@]} ; do
		CFiles[$i]="$udcHOME/udid2/geolist_${udcCountries[$i]}.txt.asc"
	done

	## Create file descriptor 11 to save STDOUT
	exec 11>&1
	## then redirect STDOUT to STDERR to avoid using >&2 for each "echo" ...
	exec 1>&2

	if ! $lud_gpg --list-key "${udcGEOLISTUDID[0]}" 2> /dev/null > /dev/null ; then
		$lud_gpg --recv-keys --batch --no-verbose --keyserver "${KeyServList[0]}" "${udcGEOLISTFPR[0]}"
	fi

	for ((i=0;$#;)) ; do
		case "$1" in
			-h|--h*) lud_utils_usage "$helpmsg" ; $lud_exit ;;
			-V|--vers*) echo $udcVersion ; $lud_exit ;;
			-f|--f*)
				shift
				if [ -f "$1" ] \
						&& Country="$($lud_gpg --no-verbose --batch --decrypt "$1" 2> /dev/null | sed -n '2s,e[0-9.+-]\+\t\([A-Z]\{3\}\)\t.*,\1,p' ;)" \
						&& [ "$Country" ] ; then
						#Note: The validity of the signature will be checked later in the script
					cCountries[$i]="$Country"
					cCFiles[$((i++))]="$1"
					udcCountries="${cCountries[@]}"
					CFiles="${cCFiles[@]}"
				else
					echo "Error: incorrect geolist file $1"  ; lud_utils_usage "$helpmsg" ; $lud_exit 101
				fi ;;
			*) echo "Error: Unrecognized option $1"; lud_utils_usage "$helpmsg" ; $lud_exit 102 ;;
		esac
		shift
	done

	lud_utils_chooseinlist "Country of Birth ?" 4 "${udcCountries[@]}" "Other..."
	local ret=$?
	if ((ret==${#udcCountries[@]}+1)) ; then
		echo -e " Sorry: we can't generate the udid.\n"\
				"Please join the OpenUDC's developpement team to add support for other countries <open-udc@googlegroups.com>."
		$lud_exit 104
	else
		local GFile="${CFiles[((ret-1))]}"
	fi

	if ! LANGUAGE=en $lud_gpg --verify --no-verbose --batch "$GFile" 2>&1 | grep -o "(${udcGEOLISTUDID[0]}\>.*)" > /dev/null ; then
		#Note: Trust is not checked.

		if [ -z "${cCountries[0]}" ] ; then # No Custom geolist file in command parameter
			if mkdir -p "${GFile%/*}" \
			&& lud_utils_GET "${GeoServList[0]}/geolist_${udcCountries[((ret-1))]}.txt.asc" > "$GFile" ; then
				if LANGUAGE=en $lud_gpg --verify --no-verbose --batch "$GFile" 2>&1 | grep -o "(${udcGEOLISTUDID[0]}\>.*)" > /dev/null ; then
					echo " File \"$GFile\" updated from git repository"
				else
					echo " Error: Invalid \"${GFile##*/}\" in git repository"
					rm "$GFile" ; $lud_exit 105
				fi
			else
				echo " Error: unable to retrieve \"$GFile\" from git repository" ; $lud_exit 105
			fi
		else
			echo "Warning: the geolist file "$GFile" is not signed by a recognized signature"
			read -p "The geolist file "$GFile" may provide invalid udid2, do you want to continue ? (y/n) " answer
			case "$answer" in
					Y* | y* | O* | o* )
					;; # do nothing
					*)
						$lud_exit 106;;
			esac
		fi
	fi

	for ((;;)) ; do
		for ((j=0;;j++)) ; do
			read -p "Place of birth ? " answer
			local cities="$($lud_gpg --no-verbose --batch --decrypt "$GFile" 2> /dev/null | awk -F"\t" ' /e[0-9.+-]+\t[A-Z]+\t.*/ { print $1"\t"$3 }'| grep -i "$answer")"
			eval local citiesname=($(echo "$cities" | awk -F"\t" '{ print "\""$2"\"" }'))


			lud_utils_chooseinlist "Please validate the place of birth" 3 "${citiesname[@]}" "Other..."
			ret=$?
			if ((ret==${#citiesname[@]}+1)) ; then
				if ((!j)) ; then continue
				else
					echo -e " Sorry: we can't generate the udid.\n"\
					"Please join the OpenUDC's developpement team to add support for other birthplaces <open-udc@googlegroups.com>."
					$lud_exit 107
				fi
			else
				local bplace="$(echo "$cities" | sed -n "${ret}p" )"
				#echo "$bplace" | sed "s,\(e[0-9.+-]\+\)\t[A-Z]\{3\}\t.*,\1,"
				#echo ${bplace%%$(echo -en "\t")*}
				break;
			fi
		done

		echo -e "\nNote: Only US-ASCII characters are allowed for first name and last name,\n"\
				"other characters (éçñßزд文...) have to be transposed to US-ASCII charset"
		if echo | uni2ascii 2> /dev/null ; then
			local Transposer="uni2ascii -B"
		else
			echo -e "\t(and uni2ascii tool is not installed in your PATH)"
			local Transposer="cat"
		fi

		local blname
		for ((;;)) ; do
			read -p "Birth last name (family name) ? " blname
			blname="$(echo "$blname" | $Transposer 2> /dev/null | tr '[:lower:]' '[:upper:]' | grep -o "[A-Z]\+" )"
			if [[ "$blname" ]] ; then
				break
			else
				echo -e "\t(Last name MUST contain at least one [A-Z] character)"
			fi
		done

		local bfname
		for ((;;)) ; do
			read -p "Birth first first name (forename) ? " bfname
			bfname="$(echo "$bfname" | $Transposer 2> /dev/null | grep -o "[A-Za-z-]\+" )"
			if [[ "$bfname" ]] ; then
				break
			else
				echo -e "\t(First name MUST contain at least one [A-Z-] character)"
			fi
		done

		local bdate
		for ((;;)) ; do
			read -p "Date of birth ? (YYYY-mm-dd) " bdate
			#date -d "$bdate" > /dev/null && break
			echo $bdate | grep "[12][0-9]\{3\}-\(0[1-9]\|1[0-2]\)-\([0[1-9]\|[12][0-9]\|3[01]\)" > /dev/null && break
		done
		local tdate="$(echo "$bdate" | ( IFS="-" read year month day ; tmonth=(zero January February March April May June July August September October November December) ; echo "$day ${tmonth[$month]} $year") )"

		echo -e "\nSummary:\n"\
				"Last name at birth: $blname\n"\
				"First name at birth: $bfname\n"\
				"Birthdate: $tdate\n"\
				"Birthplace: ${bplace##*$(echo -en "\t")}\n"
		read -p "Is that correct ? (y/n) " answer
		case "$answer" in
			Y* | y* | O* | o* )
				break ;;
		esac
	done

	blname="$( echo "$blname" | head -c 20 )"
	bfname="$( echo "$bfname" | tr '[:lower:]' '[:upper:]' | head -c 20 )"

	echo -e "\n\tTa-dah ! ... udids are (except of collision) :\n"
	sleep 1
	## redirect STDOUT to STDOUT, and close fd 11.
	exec >&11
	exec 11>&-

	echo "udid2;c;$blname;$bfname;$bdate;${bplace%%$(echo -en "\t")*};0;"
	echo "udid2;h;$( echo -n "$blname;$bfname;$bdate;${bplace%%$(echo -en "\t")*}" | lud_utils_sha1sum );0;"
	echo
}

# Local Variables:
# End:
